import topology.semicontinuous

import topology.order.lower_topology

section semicontinuity

/- 

- `lower_semicontinuous.is_compact.exists_forall_le` : We prove that lower semicontinuous functions attain their lower bound on a nonempty compact set.

- `lower_semicontinuous.bdd_below_on.is_compact` : As a consequence, a lower semicontinuous function on a compact set is bounded below. 

We then prove the opposite results for upper semicontinuous functions :

- `upper_semicontinuous.is_compact.exists_forall_ge`

- `bdd_above_on.is_compact` 

The proofs follow Bourbaki, *General Topology*, chapter 4, ¬ß6, n¬∞2. 
I do them twice (copy paste worked well), without trying to get ones
from the other by passing to the opposite order on `Œ≤`. 

However, they could also be done using the general machinery already in mathlib,
namely proving that a function `f: Œ± ‚Üí Œ≤` is upper semicontinuous iff it is continuous 
when `Œ≤` is endowed with `with_lower_topology Œ≤`, and characterizing
the compact sets of `with_lower_topology Œ≤` as those which have a maximal element. 

I tried to do so but quickly bumped on missing instances, 
such as `complete_linear_order_topology (with_lower_topology Œ≤)`. 
And indeed, `with_lower_topology Œ≤` does ***not*** satisfy `order_topology` !

In any case, `with_upper_topology` is missing, so we should also play with
the opposite order.  

Another difficulty is the type of order we want to impose on Œ≤.
Ultimately, it has to be `conditionally_complete_linear_order Œ≤`, to allow for `‚Ñù`,
but it would simplify the proofs to do it for `complete_linear_order Œ≤`,
and adding `‚ä§` and `‚ä•` at the end if needed. 
Inded, for `conditionally_complete_linear_order Œ≤`, the `supr` and `infi` only
do what one expects under additional `bdd_above` or `bdd_below` assumptions
which are painful to check each time.
(Moreover, the `simp` lemmas may be missing. )

-/

open_locale filter topology
open set filter

lemma is_total.directed {Œ± : Type*} {Œπ : Sort*} (r : Œ± ‚Üí Œ± ‚Üí Prop) [is_total Œ± r] (f : Œπ ‚Üí Œ±) :
  directed r f :=
Œª i j, or.cases_on (total_of r (f i) (f j)) (Œª h, ‚ü®j, h, refl _‚ü©) (Œª h, ‚ü®i, refl _, h‚ü©)

section linear_order

variables {Œ≤ Œ± : Type*} [topological_space Œ±] [topological_space Œ≤] {f : Œ± ‚Üí Œ≤}
variables [linear_order Œ≤] [order_closed_topology Œ≤] 

section lower_semicontinuous

lemma lower_semicontinuous_within_at_sup {g : Œ± ‚Üí Œ≤} (s : set Œ±) (a : Œ±)
  (hf : lower_semicontinuous_within_at f s a) (hg : lower_semicontinuous_within_at g s a) :
  lower_semicontinuous_within_at (Œª x, f x ‚äî g x) s a :=
begin
  intros b hb, 
  simp only [lt_sup_iff] at hb ‚ä¢,  
  cases hb with hb hb, 
  refine eventually.mp (hf b hb) (eventually_of_forall (Œª x hx, or.intro_left _ hx)), 
  refine eventually.mp (hg b hb) (eventually_of_forall (Œª x hx, or.intro_right _ hx)), 
end

lemma lower_semicontinuous_at_sup {g : Œ± ‚Üí Œ≤} (a : Œ±)
  (hf : lower_semicontinuous_at f a) (hg : lower_semicontinuous_at g a) :
  lower_semicontinuous_at (Œª x, f x ‚äî g x) a :=
begin
  intros b hb, 
  simp only [lt_sup_iff] at hb,  
  cases hb with hb hb, 
  refine eventually.mp (hf b hb) (eventually_of_forall
    (Œª x hx, lt_of_lt_of_le hx (le_sup_left))), 
  refine eventually.mp (hg b hb) (eventually_of_forall
    (Œª x hx, lt_of_lt_of_le hx (le_sup_right))),
end

lemma lower_semicontinuous_on_sup {s : set Œ±} {g : Œ± ‚Üí Œ≤}
  (hf : lower_semicontinuous_on f s) (hg : lower_semicontinuous_on g s) :
  lower_semicontinuous_on (Œª x, f x ‚äî g x) s :=  Œª a ha, lower_semicontinuous_within_at_sup s a (hf a ha) (hg a ha)

lemma lower_semicontinuous_sup {g : Œ± ‚Üí Œ≤}
  (hf : lower_semicontinuous f) (hg : lower_semicontinuous g) :
  lower_semicontinuous (Œª x, f x ‚äî g x) := 
Œª a, lower_semicontinuous_at_sup a (hf a) (hg a)

lemma lower_semicontinuous_within_at_inf {g : Œ± ‚Üí Œ≤} (s : set Œ±) (a : Œ±)
  (hf : lower_semicontinuous_within_at f s a) (hg : lower_semicontinuous_within_at g s a) :
   lower_semicontinuous_within_at (Œª x, f x ‚äì g x) s a :=
begin
  intros b hb, 
  simp only [lt_inf_iff] at hb ‚ä¢, 
  exact eventually.and (hf b hb.1) (hg b hb.2),
end

lemma lower_semicontinuous_at_inf {g : Œ± ‚Üí Œ≤} (a : Œ±)
  (hf : lower_semicontinuous_at f a) (hg : lower_semicontinuous_at g a) :
   lower_semicontinuous_at (Œª x, f x ‚äì g x) a :=
begin
  intros b hb,
  simp only [lt_inf_iff] at hb ‚ä¢,
  exact eventually.and (hf b hb.1) (hg b hb.2),
end

lemma lower_semicontinuous_on_inf {g : Œ± ‚Üí Œ≤} (s : set Œ±)
  (hf : lower_semicontinuous_on f s) (hg : lower_semicontinuous_on g s) :
   lower_semicontinuous_on (Œª x, f x ‚äì g x) s :=
Œª a ha, lower_semicontinuous_within_at_inf s a (hf a ha) (hg a ha)

lemma lower_semicontinuous_inf {g : Œ± ‚Üí Œ≤} 
  (hf : lower_semicontinuous f) (hg : lower_semicontinuous g) :
   lower_semicontinuous (Œª x, f x ‚äì g x) :=
Œª a, lower_semicontinuous_at_inf a (hf a) (hg a)

-- TODO : add same for upper_semicontinuous

lemma lower_semicontinuous_on_iff_restrict {s : set Œ±} : 
  lower_semicontinuous_on f s ‚Üî
  lower_semicontinuous (s.restrict f) := sorry

lemma lower_semicontinuous_on_iff_preimage_Ioi {s : set Œ±} :
  lower_semicontinuous_on f s ‚Üî 
  ‚àÄ x ‚àà s, ‚àÄ b, b < f x ‚Üí  
  ‚àÉ (u : set Œ±), is_open u ‚àß f ‚Åª¬π' (set.Ioi b) ‚à© s = u ‚à© s :=
sorry

/- This is ridiculously difficult ! -/
lemma lower_semicontinuous_on_iff_preimage_Iic {s : set Œ±} :
  lower_semicontinuous_on f s ‚Üî 
  ‚àÄ b, ‚àÉ (v : set Œ±), is_closed v ‚àß f ‚Åª¬π' (set.Iic b) ‚à© s = v ‚à© s :=
begin
  split,
  { intro hf, 
    intro b, 
    use closure (f ‚Åª¬π' Iic b ‚à© s),
    simp only [is_closed_closure, true_and],
    apply subset.antisymm,
    rintros a ha, exact ‚ü®subset_closure ha, ha.2‚ü©, 
    
    rintros a ‚ü®hab, has‚ü©,
    apply and.intro _ has,
    simp only [mem_preimage, mem_Iic], 
     simp only [lower_semicontinuous_on, lower_semicontinuous_within_at] at hf, 
    rw ‚Üê not_lt, intro hb,
    simp only [mem_closure_iff_frequently, mem_preimage, mem_Iic, mem_inter_iff] at hab,
    apply hab,
    dsimp, 
    specialize hf a has b hb,
    simp only [filter.eventually] at hf ‚ä¢,
    simp only [nhds_within, filter.mem_inf_iff] at hf, 
    obtain ‚ü®u, hu, v, hv, huv‚ü© := hf, 
    simp only [mem_principal] at hv, 
    simp_rw [not_and_distrib, not_le],
    rw set.set_of_or, rw huv, 
    apply filter.mem_of_superset hu, 
    intros x hx,
    by_cases hx' : x ‚àà s,
    left, exact ‚ü®hx, hv hx'‚ü©,
    right, exact hx', },
  { intro hf, 
    simp only [lower_semicontinuous_on, lower_semicontinuous_within_at], 
    intros a ha b hb,
    simp only [filter.eventually, nhds_within, filter.mem_inf_iff],
    
    obtain ‚ü®v, hv_closed, hv‚ü© := hf b, 
    simp only [filter.mem_principal],
    use (v·∂ú ‚à™ s·∂ú),
    split,
    apply filter.mem_of_superset,

    apply is_open.mem_nhds , 
    { rw is_open_compl_iff, exact hv_closed, },
    { simp only [mem_compl_iff], intro hav, 
      rw ‚Üê not_le at hb, apply hb, 
      rw ‚Üê mem_Iic, rw ‚Üê set.mem_preimage, 
      apply set.inter_subset_left,
      rw hv, exact ‚ü®hav, ha‚ü©, },
    exact v·∂ú.subset_union_left s·∂ú,

    use ({ x : Œ± | b < f x} ‚à™ s), 
    split, 
    apply set.subset_union_right,

    rw ‚Üê compl_inj_iff,
    simp only [set.compl_inter, set.compl_union, compl_compl], 

    rw ‚Üê hv, 
    suffices : f ‚Åª¬π' Iic b = { x : Œ± | b < f x }·∂ú,
    rw this, 
    rw set.inter_union_compl,
    ext x, simp only [mem_preimage, mem_Iic, mem_compl_iff, mem_set_of_eq, not_lt], },
end

/-- A lower semicontinuous function attains its lower bound on a nonempty compact set -/
theorem lower_semicontinuous.exists_forall_le_of_is_compact {s : set Œ±} 
  (ne_s : s.nonempty) (hs : is_compact s)
  (hf : lower_semicontinuous_on f s) : 
  ‚àÉ (a ‚àà s), ‚àÄ x ‚àà s, f a ‚â§ f x := 
begin
  haveI : nonempty Œ± := ‚ü®ne_s.some‚ü©,
  haveI : nonempty s := ‚ü®‚ü®ne_s.some, ne_s.some_spec‚ü©‚ü©,

  let œÜ : Œ≤ ‚Üí filter Œ± := Œª b, ùìü (s ‚à© f ‚Åª¬π' (Iic b)),
  let ‚Ñ± : filter Œ± := ‚®Ö a : s, œÜ (f a), 
  haveI : ‚Ñ±.ne_bot,
  { refine infi_ne_bot_of_directed _ _,
    { refine directed.mono_comp ge (Œª b‚ÇÅ b‚ÇÇ hb, _) (is_total.directed _ _), 
      refine principal_mono.mpr (inter_subset_inter_right _ (preimage_mono $ Iic_subset_Iic.mpr hb)) },
    { intro x,
      have : (pure x : filter Œ±) ‚â§ œÜ (f x) := le_principal_iff.mpr ‚ü®x.2, le_refl (f x)‚ü©,
      exact ne_bot_of_le this } },

  have h‚Ñ±s : ‚Ñ± ‚â§ ùìü s,
    from infi_le_of_le ‚ü®ne_s.some, ne_s.some_spec‚ü© (principal_mono.mpr $ inter_subset_left _ _),

  have h‚Ñ± : ‚àÄ x ‚àà s, ‚àÄ·∂† y in ‚Ñ±, f y ‚â§ f x,
    from Œª x hx, mem_infi_of_mem ‚ü®x, hx‚ü© (inter_subset_right _ _), 
  
  obtain ‚ü®a, ha, h‚ü© := hs h‚Ñ±s, 
  letI : (ùìù a ‚äì ‚Ñ±).ne_bot := h,
  refine ‚ü®a, ha, Œª x hx, le_of_not_lt $ Œª hxa, _‚ü©,
  suffices : ‚àÄ·∂† x in ùìù a ‚äì ‚Ñ±, false,
    by rwa eventually_const at this,
  filter_upwards [(hf a ha (f x) hxa).filter_mono (inf_le_inf_left _ h‚Ñ±s),
    (h‚Ñ± x hx).filter_mono (inf_le_right : ùìù a ‚äì ‚Ñ± ‚â§ ‚Ñ±)] 
    using Œª y h‚ÇÅ h‚ÇÇ, not_le_of_lt h‚ÇÅ h‚ÇÇ,
end

/-- A lower semicontinuous function is bounded above on a compact set. -/
lemma lower_semicontinuous.bdd_below_of_is_compact [nonempty Œ≤] {s : set Œ±} (hs : is_compact s) (hf : lower_semicontinuous_on f s): 
  bdd_below (f '' s) := 
begin
  cases s.eq_empty_or_nonempty,
  { rw h, simp only [set.image_empty],
    exact bdd_below_empty },
  { obtain ‚ü®a, ha, has‚ü© := lower_semicontinuous.exists_forall_le_of_is_compact h hs hf, 
    use f a, rintros b ‚ü®x, hx, rfl‚ü©, exact has x hx },
end

end lower_semicontinuous

section upper_semicontinuous

/-- An upper semicontinuous function attains its upper bound on a nonempty compact set -/
theorem upper_semicontinuous.exists_forall_ge_of_is_compact {s : set Œ±} 
  (ne_s : s.nonempty) (hs : is_compact s)
  (hf : upper_semicontinuous_on f s): 
  ‚àÉ (a ‚àà s), ‚àÄ x ‚àà s, f x ‚â§ f a := 
@lower_semicontinuous.exists_forall_le_of_is_compact (Œ≤·µí·µà) _ _ _ _ _ _ s ne_s hs hf

/-- An upper semicontinuous function is bounded above on a compact set. -/
lemma upper_semicontinuous.bdd_above_of_is_compact [nonempty Œ≤] {s : set Œ±}
  (hf : upper_semicontinuous_on f s) (hs : is_compact s): 
  bdd_above (f '' s) := 
@lower_semicontinuous.bdd_below_of_is_compact (Œ≤·µí·µà) _ _ _ _ _ _ _ s hs hf

end upper_semicontinuous

end linear_order

section complete_linear_order

variables {Œ≤ Œ± : Type*} [topological_space Œ±] [topological_space Œ≤] {f : Œ± ‚Üí Œ≤}
variables [complete_linear_order Œ≤] [order_closed_topology Œ≤] 

/-- A lower semicontinuous function attains its lower bound on a nonempty compact set -/
theorem lower_semicontinuous.exists_infi_of_is_compact {s : set Œ±} 
  (ne_s : s.nonempty) (hs : is_compact s)
  (hf : lower_semicontinuous_on f s) : 
  ‚àÉ (a ‚àà s), f a = ‚®Ö x ‚àà s, f x := 
begin
  obtain ‚ü®a, ha, ha_le‚ü© := lower_semicontinuous.exists_forall_le_of_is_compact ne_s hs hf,
  use a, apply and.intro ha,
  apply le_antisymm, 
  rw le_infi‚ÇÇ_iff, intros x hx, exact ha_le x hx,
  exact infi‚ÇÇ_le a ha,
end

theorem lower_semicontinuous_within_at_infi‚ÇÇ {Œπ : Type*} {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {s : set Œ±} {a : Œ±} {I : set Œπ}
  (hf : ‚àÄ i ‚àà I, lower_semicontinuous_within_at (f i) s a) :
  lower_semicontinuous_within_at (Œª x, ‚®Ö i ‚àà I, f i x) s a :=
  sorry

theorem lower_semicontinuous_on_infi‚ÇÇ {Œπ : Type*} {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {s : set Œ±} {I : set Œπ}
  (hf : ‚àÄ i, lower_semicontinuous_on (f i) s) :
  lower_semicontinuous_on (Œª x, ‚®Ö i ‚àà I, f i x) s :=
  sorry

theorem lower_semicontinuous_at_infi‚ÇÇ {Œπ : Type*} {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {a : Œ±} {I : set Œπ}
  (hf : ‚àÄ i, lower_semicontinuous_at (f i) a) :
  lower_semicontinuous_at (Œª x, ‚®Ö i ‚àà I, f i x) a :=
  sorry

theorem lower_semicontinuous_infi‚ÇÇ {Œπ : Type*} {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {I : set Œπ}
  (hf : ‚àÄ i, lower_semicontinuous (f i)) :
  lower_semicontinuous (Œª x, ‚®Ö i ‚àà I, f i x) :=
  sorry

theorem lower_semicontinuous_within_at_supr‚ÇÇ {Œπ : Type*} {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {s : set Œ±} {a : Œ±} {I : set Œπ}
  (hI : I.finite) (hf : ‚àÄ i ‚àà I, lower_semicontinuous_within_at (f i) s a) :
  lower_semicontinuous_within_at (Œª x, ‚®Ü i ‚àà I, f i x) s a :=
begin
  revert hf,
  apply hI.induction_on,
  { intro hf,
    simp only [mem_empty_iff_false, csupr_false, supr_bot], 
    exact lower_semicontinuous_within_at_const, },
  intros j J hjJ hJ hrec hf,
  suffices : ‚àÄ x, (‚®Ü (i : Œπ) (H : i ‚àà insert j J), f i x) = (f j x) ‚äî (‚®Ü i ‚àà J, f i x), 
  rw funext this,
  apply lower_semicontinuous_within_at_sup s a (hf j (set.mem_insert j J)),
  apply hrec,
  intros i hi, exact hf i (set.mem_insert_of_mem j hi),
  intro x,
  simp only [set.insert_eq],
  rw supr_union,
  apply congr_arg2 _ _ rfl,
  simp only [mem_singleton_iff, supr_supr_eq_left],
end

theorem lower_semicontinuous_on_supr‚ÇÇ {Œπ : Type*} {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {s : set Œ±} {I : set Œπ} (hI : I.finite)
  (hf : ‚àÄ i ‚àà I, lower_semicontinuous_on (f i) s) :
  lower_semicontinuous_on (Œª x, ‚®Ü i ‚àà I, f i x) s := Œª a ha,
lower_semicontinuous_within_at_supr‚ÇÇ hI (Œª i hi, hf i hi a ha)

theorem lower_semicontinuous_at_supr‚ÇÇ {Œπ : Type*} {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {a : Œ±} {I : set Œπ} (hI : I.finite)
  (hf : ‚àÄ i, lower_semicontinuous_at (f i) a) :
  lower_semicontinuous_at (Œª x, ‚®Ü i ‚àà I, f i x) a :=
  sorry

theorem lower_semicontinuous_supr‚ÇÇ {Œπ : Type*} {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {I : set Œπ} (hI : I.finite)
  (hf : ‚àÄ i, lower_semicontinuous (f i)) :
  lower_semicontinuous (Œª x, ‚®Ü i ‚àà I, f i x) :=
  sorry

/-- An upper semicontinuous function attains its upper bound on a nonempty compact set -/
theorem upper_semicontinuous.exists_supr_of_is_compact {s : set Œ±} 
  (ne_s : s.nonempty) (hs : is_compact s)
  (hf : upper_semicontinuous_on f s) : 
  ‚àÉ (a ‚àà s), f a = ‚®Ü x ‚àà s, f x := 
@lower_semicontinuous.exists_infi_of_is_compact (Œ≤·µí·µà) _ _ _ _ _ _ _ ne_s hs hf


theorem upper_semicontinuous_within_at_supr‚ÇÇ {Œπ : Type*} {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {s : set Œ±} {a : Œ±} {I : set Œπ}
  (hf : ‚àÄ i, upper_semicontinuous_within_at (f i) s a) :
  upper_semicontinuous_within_at (Œª x, ‚®Ö i ‚àà I, f i x) s a :=
  sorry

theorem upper_semicontinuous_on_supr‚ÇÇ {Œπ : Type*} {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {s : set Œ±} {I : set Œπ}
  (hf : ‚àÄ i, upper_semicontinuous_on (f i) s) :
  upper_semicontinuous_on (Œª x, ‚®Ö i ‚àà I, f i x) s :=
  sorry

theorem upper_semicontinuous_at_supr‚ÇÇ {Œπ : Type*} {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {a : Œ±} {I : set Œπ}
  (hf : ‚àÄ i, upper_semicontinuous_at (f i) a) :
  upper_semicontinuous_at (Œª x, ‚®Ö i ‚àà I, f i x) a :=
  sorry

theorem upper_semicontinuous_supr‚ÇÇ {Œπ : Type*} {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {I : set Œπ}
  (hf : ‚àÄ i, upper_semicontinuous (f i)) :
  upper_semicontinuous (Œª x, ‚®Ö i ‚àà I, f i x) :=
  sorry



end complete_linear_order

end semicontinuity

section junk

/- 
Attempts to do the job without reproving anything

but one gets to prove [complete_linear_order_topology (with_lower_topology Œ≤)]
-/

variables {Œ± Œ≤ : Type*} [topological_space Œ±] [preorder Œ≤] [topological_space Œ≤] [order_topology Œ≤]

variable (f : Œ± ‚Üí Œ≤)

open with_lower_topology
namespace with_lower_topology

lemma to_lower_continous : 
  continuous (to_lower : Œ≤ ‚Üí with_lower_topology Œ≤):= sorry

lemma of_lower_upper_semicontinous : 
  upper_semicontinuous (of_lower : with_lower_topology Œ≤ ‚Üí Œ≤):= sorry

lemma upper_semicontinuous_iff_to_lower_comp_continuous_at {a : Œ±} :
  upper_semicontinuous_at f a ‚Üî continuous_at (to_lower ‚àò f) a := 
sorry

lemma upper_semicontinuous_iff_to_lower_comp_continuous :
  upper_semicontinuous f ‚Üî continuous (to_lower ‚àò f) := sorry

lemma upper_semicontinuous_iff_to_lower_comp_continuous_on {s : set Œ±} :
  upper_semicontinuous_on f s ‚Üî continuous_on (to_lower ‚àò f) s := sorry

end with_lower_topology


end junk